openapi: 3.0.3
info:
  title: Vinci Cyber Intelligence Authentication Service
  description: |
    Microservice de gestion des identifiants et d'authentification pour le projet Vinci Cyber Intelligence. 
    Ce service permet de gérer les identifiants des utilisateurs et de réaliser leur authentification via un token JWT, 
    assurant une sécurité et une gestion simplifiée des accès.
  version: 1.0.0
servers:
  - url: http://localhost:9006
    description: Development server

paths:

  /authentication/connect:
    post:
      summary: Connecter l'utilisateur et retourner un token JWT
      description: |
        Cette route permet à un utilisateur de se connecter en fournissant son nom d'utilisateur 
        et son mot de passe. Si les informations sont valides, un token JWT est généré et retourné 
        pour permettre l'authentification de l'utilisateur lors des requêtes futures. Ce token 
        doit être envoyé dans l'en-tête des requêtes pour accéder aux ressources protégées.
      requestBody:
        description: Identifiants de l'utilisateur nécessaires pour la connexion
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/credentials'
      responses:
        400:
          description: Les identifiants fournis ne respectent pas le format requis
        401:
          description: Mauvais nom d'utilisateur ou mot de passe
        200:
          description: Connexion réussie, retourne un token JWT pour authentifier l'utilisateur
          content:
            'text/plain':
              schema:
                type: string
                example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9...

  /authentication/verify:
    post:
      summary: Vérifier l'authenticité d'un token JWT
      description: |
        Cette route permet de vérifier si un token JWT fourni est valide ou expiré. Un token valide 
        confirme que l'utilisateur est authentifié et peut accéder aux ressources du système. 
        En cas de succès, le nom d'utilisateur associé au token est retourné.
      requestBody:
        description: Token JWT à vérifier pour l'authentification
        required: true
        content:
          'text/plain':
            schema:
              type: string
              example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9...
      responses:
        401:
          description: Token JWT invalide ou expiré
        200:
          description: Token vérifié avec succès, retourne le nom d'utilisateur associé
          content:
            'application/json':
              schema:
                type: string
                example: hacker01

  /authentication/{username}:
    parameters:
      - name: username
        in: path
        description: Nom d'utilisateur unique pour lequel créer, modifier ou supprimer les identifiants
        required: true
        schema:
          type: string
          example: hacker01

    post:
      summary: Créer des identifiants pour un nouvel utilisateur
      description: |
        Permet de créer un compte utilisateur avec un nom d'utilisateur et un mot de passe. 
        Cette opération n'est possible que pour des utilisateurs qui n'ont pas encore de compte. 
        En cas de succès, un code 201 est retourné. Si des identifiants existent déjà, un code 409 est envoyé.
      requestBody:
        description: Identifiants de l'utilisateur nécessaires pour la création
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/credentials'
      responses:
        400:
          description: Les identifiants fournis sont invalides
        409:
          description: Des identifiants existent déjà pour ce nom d'utilisateur
        201:
          description: Compte créé avec succès pour l'utilisateur

    put:
      summary: Modifier les identifiants d'un utilisateur existant
      description: |
        Permet de mettre à jour les informations de connexion d'un utilisateur, incluant le mot de passe. 
        Cette opération nécessite que l'utilisateur soit déjà enregistré. Si aucun identifiant n'est 
        trouvé pour le nom d'utilisateur donné, un code 404 est retourné.
      requestBody:
        description: Nouvelles informations de connexion de l'utilisateur
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/credentials'
      responses:
        400:
          description: Les informations de connexion fournies sont invalides
        404:
          description: Aucun identifiant trouvé pour ce nom d'utilisateur
        200:
          description: Les identifiants ont été mis à jour avec succès

    delete:
      summary: Supprimer les identifiants d'un utilisateur
      description: |
        Permet de supprimer les informations d'identification d'un utilisateur du système en 
        utilisant son nom d'utilisateur. Cette action est irréversible et interdit l'accès futur 
        à l'utilisateur jusqu'à la création de nouveaux identifiants.
      responses:
        404:
          description: Aucun identifiant trouvé pour ce nom d'utilisateur
        200:
          description: Identifiants supprimés avec succès pour l'utilisateur

components:
  schemas:
    credentials:
      description: |
        Objet contenant les informations d'identification de l'utilisateur. Utilisé pour la 
        connexion, la création et la mise à jour des identifiants.
      type: object
      properties:
        username:
          type: string
          description: Nom d'utilisateur unique, utilisé pour l'authentification
        password:
          type: string
          description: Mot de passe de l'utilisateur, requis pour la connexion et sécurisé
      example:
        username: "hacker01"
        password: "securePassword123"
