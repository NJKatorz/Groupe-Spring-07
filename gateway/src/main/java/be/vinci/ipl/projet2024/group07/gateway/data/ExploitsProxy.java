package be.vinci.ipl.projet2024.group07.gateway.data;

import be.vinci.ipl.projet2024.group07.gateway.models.Exploit;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

@Repository
@FeignClient(name = "exploits")
public interface ExploitsProxy {

  /**
   * Get all exploits
   * @param serverType the type of server to filter
   * @return all exploits
   */
  @GetMapping("/exploits")
  Iterable<Exploit> readAll(@RequestParam(value = "serverType", required = false) String serverType);

  /**
   * Create an exploit
   * @param exploit the exploit to create
   */
  @PostMapping("/exploits")
  void createOne(@RequestBody Exploit exploit);

  /**
   * Get one exploit
   * @param exploitId the id of the exploit to get
   * @return the exploit
   */
  @GetMapping("/exploits/{exploitId}")
  Exploit readOne(@PathVariable int exploitId);

  /**
   * Update an exploit
   * @param exploitId the id of the exploit to update
   * @param exploit the new exploit
   */
  @PostMapping("/exploits/{exploitId}")
  void updateOne(@PathVariable int exploitId, @RequestBody Exploit exploit);

  /**
   * Delete one exploit
   * @param exploitId the id of the exploit to delete
   */
  @DeleteMapping("/exploits/{exploitId}")
  void deleteOne(@PathVariable int exploitId);

  /**
   * Validate an exploit
   * @param exploitId the id of the exploit to validate
   */
  @PatchMapping("/exploits/{exploitId}/validate")
  void validateExploit(@PathVariable int exploitId);
}
