package be.vinci.ipl.projet2024.group07.mockexploits;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;

@RestController
public class ExploitsController {

  @GetMapping("/exploits/{exploitId}")
  public Exploit readOne(@PathVariable int exploitId) {
    Exploit exploit = new Exploit();
    exploit.setId(exploitId);
    exploit.setName("Exploit Name");
    exploit.setServerType("Web");
    exploit.setAuthorId(12345);
    exploit.setValidated(true);
    return exploit;
  }

  @PostMapping("/exploits")
  public ResponseEntity<Exploit> createOne(@RequestBody Exploit newExploit) {
    newExploit.setId(1); // Simule un ID généré
    newExploit.setValidated(true); // Simule une validation par défaut
    return new ResponseEntity<>(newExploit, HttpStatus.CREATED);
  }

  @PutMapping("/exploits/{exploitId}")
  public ResponseEntity<Void> updateOne(@PathVariable int exploitId, @RequestBody Exploit updatedExploit) {
    // Simule une mise à jour réussie
    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }

  @DeleteMapping("/exploits/{exploitId}")
  public ResponseEntity<Void> deleteOne(@PathVariable int exploitId) {
    // Simule une suppression réussie
    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }

  @PatchMapping("/exploits/{exploitId}/validate")
  public ResponseEntity<Void> validateExploit(@PathVariable int exploitId) {
    // Simule une validation réussie
    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }

  @GetMapping("/exploits/author/{authorId}")
  public ResponseEntity<Iterable<Exploit>> readByAuthor(@PathVariable int authorId) {
    // Simule une liste vide ou remplie
    return new ResponseEntity<>(new ArrayList<>(), HttpStatus.OK);
  }

  @DeleteMapping("/exploits/author/{authorId}")
  public ResponseEntity<Void> deleteByAuthor(@PathVariable int authorId) {
    // Simule une suppression réussie
    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }
}
