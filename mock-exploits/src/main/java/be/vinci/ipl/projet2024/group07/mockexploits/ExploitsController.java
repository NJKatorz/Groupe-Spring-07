package be.vinci.ipl.projet2024.group07.mockexploits;


import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/exploits")
public class ExploitsController {
  private final Map<Integer, Exploit> exploits = new HashMap<>();
  private int currentId = 1;


  @GetMapping
  public List<Exploit> getAllExploits(@RequestParam(required = false) String author,
      @RequestParam(required = false) String serverType) {
    return exploits.values().stream()
        .filter(exploit -> (author == null || exploit.getAuthor().equalsIgnoreCase(author)) &&
            (serverType == null || exploit.getServerType().equalsIgnoreCase(serverType)))
        .collect(Collectors.toList());
  }


  @PostMapping
  public ResponseEntity<Void> createExploit(@RequestBody Exploit exploit) {
    if (exploit.invalid()) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
    exploit.setExploitId(currentId++);
    exploit.setValidated(false);
    exploits.put(exploit.getExploitId(), exploit);
    return new ResponseEntity<>(HttpStatus.CREATED);
  }


  @GetMapping("/{id}")
  public ResponseEntity<Exploit> getExploit(@PathVariable int id) {
    Exploit exploit = exploits.get(id);
    if (exploit == null) {
      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
    return ResponseEntity.ok(exploit);
  }


  @DeleteMapping("/{id}")
  public ResponseEntity<Void> deleteExploit(@PathVariable int id) {
    if (!exploits.containsKey(id)) {
      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
    exploits.remove(id);
    return new ResponseEntity<>(HttpStatus.OK);
  }


  @PatchMapping("/validate/{id}")
  public ResponseEntity<Void> validateExploit(@PathVariable int id) {
    Exploit exploit = exploits.get(id);
    if (exploit == null) {
      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
    exploit.setValidated(true);
    return new ResponseEntity<>(HttpStatus.OK);
  }


  @PatchMapping("/description/{id}")
  public ResponseEntity<Void> updateDescription(@PathVariable int id, @RequestBody Map<String, String> updates) {
    Exploit exploit = exploits.get(id);
    if (exploit == null || updates.get("description") == null || updates.get("description").isBlank()) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
    exploit.setDescription(updates.get("description"));
    return new ResponseEntity<>(HttpStatus.OK);
  }


  @PatchMapping("/guide/{id}")
  public ResponseEntity<Void> updateGuide(@PathVariable int id, @RequestBody Map<String, String> updates) {
    Exploit exploit = exploits.get(id);
    if (exploit == null || updates.get("guide") == null || updates.get("guide").isBlank()) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
    exploit.setGuide(updates.get("guide"));
    return new ResponseEntity<>(HttpStatus.OK);
  }

}
