package be.vinci.ipl.projet2024.group07.mockexploits;

import java.util.*;
import java.util.stream.Collectors;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/exploits")
public class ExploitsController {

  private final Map<Integer, Exploit> exploits = new HashMap<>();
  private int currentId = 1;

  @GetMapping
  public List<Exploit> getAllExploits(@RequestParam(required = false) String serverType) {
    return exploits.values().stream()
        .filter(exploit -> serverType == null || exploit.getServerType().equalsIgnoreCase(serverType))
        .collect(Collectors.toList());
  }

  @PostMapping
  public ResponseEntity<Exploit> createExploit(@RequestBody Exploit exploit) {
    if (exploit.invalid()) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
    exploit.setId(currentId++);
    exploit.setValidated(false);
    exploits.put(exploit.getId(), exploit);
    return new ResponseEntity<>(exploit, HttpStatus.CREATED);
  }

  @GetMapping("/{exploitId}")
  public ResponseEntity<Exploit> getExploit(@PathVariable int exploitId) {
    Exploit exploit = exploits.get(exploitId);
    if (exploit == null) {
      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
    return ResponseEntity.ok(exploit);
  }

  @PutMapping("/{exploitId}")
  public ResponseEntity<Void> updateExploit(@PathVariable int exploitId, @RequestBody Exploit updatedExploit) {
    Exploit existingExploit = exploits.get(exploitId);
    if (existingExploit == null || updatedExploit.invalid() ||
        !Objects.equals(existingExploit.getId(), updatedExploit.getId()) ||
        !Objects.equals(existingExploit.getAuthorId(), updatedExploit.getAuthorId()) ||
        existingExploit.isValidated() != updatedExploit.isValidated()) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
    updatedExploit.setValidated(existingExploit.isValidated());
    exploits.put(exploitId, updatedExploit);
    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }

  @DeleteMapping("/{exploitId}")
  public ResponseEntity<Void> deleteExploit(@PathVariable int exploitId) {
    if (!exploits.containsKey(exploitId)) {
      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
    exploits.remove(exploitId);
    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }

  @PatchMapping("/{exploitId}/validate")
  public ResponseEntity<Void> validateExploit(@PathVariable int exploitId) {
    Exploit exploit = exploits.get(exploitId);
    if (exploit == null) {
      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
    if (exploit.isValidated()) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
    exploit.setValidated(true);
    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }

  @GetMapping("/author/{authorId}")
  public ResponseEntity<List<Exploit>> getExploitsByAuthor(@PathVariable int authorId) {
    List<Exploit> authorExploits = exploits.values().stream()
        .filter(exploit -> exploit.getAuthorId() == authorId) // Utilisation de getAuthorId
        .collect(Collectors.toList());
    return ResponseEntity.ok(authorExploits);
  }

  @DeleteMapping("/author/{authorId}")
  public ResponseEntity<Void> deleteExploitsByAuthor(@PathVariable int authorId) {
    boolean removed = exploits.entrySet().removeIf(entry -> entry.getValue().getAuthorId() == authorId); // Utilisation de getAuthorId
    if (!removed) {
      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }
}
