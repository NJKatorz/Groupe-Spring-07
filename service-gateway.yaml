openapi: 3.0.3
info:
  title: Vinci Cyber Intelligence Gateway
  description: |
    Microservice d'interface pour le projet Vinci Cyber Intelligence. 
    Point d’entrée unique pour l'ensemble des services du projet Vinci Cyber Intelligence. 
    Permet de centraliser les requêtes aux différents microservices comme l'authentification, 
    la gestion des utilisateurs, des exploits, des cibles, et des serveurs.
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
    description: Development server
paths:

  /auth:
    post:
      summary: Authentification d'un utilisateur
      description: |
        Permet à un utilisateur de s'authentifier en fournissant ses identifiants. En cas de succès, un token JWT est renvoyé pour authentifier les requêtes ultérieures.

        **Corps de la requête** :
          - `username` (obligatoire) : Le pseudo de l'utilisateur.
          - `password` (obligatoire) : Le mot de passe de l'utilisateur.

      requestBody:
        description: Identifiants de l'utilisateur pour générer un token JWT
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentials'
      responses:
        '400':
          description: Les identifiants fournies sont invalides
        '401':
          description: Erreur d'authentification
        '200':
          description: Retourne un token d'authentification pour l'utilisateur
          content:
            'application/json':
              schema:
                type: string
                example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJhdXRoMCIsInBzZXVkbyI6IkNhdDRMaWZlIn0.LqfooEI-I9VTBo-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

  /users/{username}:
    parameters:
      - name: username
        in: path
        description: Nom d'utilisateur unique
        required: true
        schema:
          type: string
          example: hacker01

    get:
      summary: Récupérer les informations d'un utilisateur spécifique
      description: |
        Permet de récupérer les informations complètes d'un utilisateur spécifique grâce à son 
        nom d'utilisateur. Si l'utilisateur n'est pas trouvé, un code d'erreur 404 est retourné.
      responses:
        404:
          description: Aucun utilisateur trouvé avec ce nom d'utilisateur
        200:
          description: Retourne les données de l'utilisateur correspondant
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/user'

    post:
      summary: Créer un nouvel utilisateur
      description: |
        Crée un utilisateur dans le système en fournissant les informations nécessaires telles que 
        le nom d'utilisateur, le prénom, le nom et le statut d'administrateur. Un code 201 indique 
        que la création a été réussie, tandis qu'un code 409 est retourné en cas de conflit.
      requestBody:
        description: Données de l'utilisateur à créer
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/userWithCredentials'
      responses:
        400:
          description: Les données fournies sont invalides
        409:
          description: Un utilisateur existe déjà avec ce nom d'utilisateur
        201:
          description: L'utilisateur a été créé avec succès

    put:
      summary: Modifier les informations d'un utilisateur
      description: |
        Met à jour les informations d'un utilisateur existant, y compris son prénom, son nom de 
        famille et son statut d'administrateur. Si l'utilisateur n'est pas trouvé, un code 404 
        est retourné.
      requestBody:
        description: Nouvelles données de l'utilisateur
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/userWithCredentials'
      responses:
        400:
          description: Les données fournies sont invalides
        404:
          description: Aucun utilisateur trouvé avec ce nom d'utilisateur
        200:
          description: L'utilisateur a été modifié avec succès

    delete:
      summary: Supprimer un utilisateur
      description: |
        Permet de supprimer un utilisateur existant du système en utilisant son nom d'utilisateur.
        Retourne un code 404 si l'utilisateur n'est pas trouvé et un code 200 si la suppression 
        a été effectuée avec succès.
      responses:
        404:
          description: Aucun utilisateur trouvé avec ce nom d'utilisateur
        200:
          description: L'utilisateur a été supprimé avec succès

  /exploits:
    get:
      summary: Consulter tous les exploits
      description: |
        Permet de récupérer la liste de tous les exploits disponibles dans le système.

        **Erreurs possibles** :
          - `404 Not Found` : Si aucun exploit n'est trouvé.

      responses:
        '200':
          description: Liste des exploits récupérée avec succès
        '404':
          description: Aucun exploit trouvé

    post:
      summary: Créer un exploit
      description: |
        L'utilisateur peut créer un exploit en fournissant les détails requis tels que
        le nom, la description, l'auteur, le type de serveur, le guide pas à pas et l'état de 
        validation. En cas de succès, l'exploit sera créé. Sinon en cas d'erreur, une réponse
        d'erreur sera retournée.

        **Préconditions** :
          - Les informations fournies doivent être valides.
          - Si un exploit avec le même identifiant existe déjà, une erreur sera retournée.

        **Corps de la requête** :
          - `name` (requis) : Nom de l'exploit
          - `description` (requis) : Description détaillée de l'exploit
          - `author` (requis) : Auteur de l'exploit
          - `server_type` (requis) : Type de serveur vulnérable à l'exploit
          - `guide` (requis) : Guide pas à pas pour exploiter la vulnérabilité
          - `validated` (optionnel) : Exploit validé ou non par l'administrateur, par défaut `false` si non spécifié.

      requestBody:
        description: Données de l'exploit à créer
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/exploit'
      responses:
        '400':
          description: Données invalides fournies
        409:
          description: Un exploit existe déjà avec cet id
        201:
          description: L'exploit a été créé avec succès

  /cibles:
    get:
      summary: Consulter toutes les cibles
      description: |
        Permet de récupérer la liste des cibles existantes dans le système, incluant les entreprises, domaines, et autres caractéristiques.

        **Erreurs possibles** :
          - `404 Not Found` : Si aucune cible n'est trouvée.

      responses:
        '200':
          description: Liste des cibles récupérée avec succès
        '404':
          description: Aucune cible trouvée

    post:
      summary: Créer une nouvelle cible
      description: |
        Permet de créer une nouvelle cible avec les informations spécifiées. La création nécessite au moins le nom de l'entreprise et son domaine.

        **Corps de la requête** :
          - `companyName` (obligatoire) : Nom de l'entreprise cible.
          - `domain` (obligatoire) : Domaine de l'entreprise cible.
          - `localisation` (optionnel) : Localisation géographique de la cible.
          - `nbEmploys` (optionnel) : Nombre d'employés de l'entreprise.
          - `nbServers` (optionnel) : Nombre de serveurs associés à la cible.
          - `revenue` (optionnel) : Chiffre d'affaires de l'entreprise.

        **Erreurs possibles** :
          - `400 Bad Request` : Si les données fournies ne sont pas valides.

      requestBody:
        description: Données de la cible à créer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/target'
      responses:
        '201':
          description: Cible créée avec succès
        '400':
          description: Données invalides

  /servers:
    get:
      summary: Consulter tous les serveurs
      description: |
        Permet de récupérer la liste des serveurs associés aux différentes cibles dans le système.

        **Erreurs possibles** :
          - `404 Not Found` : Si aucun serveur n'est trouvé.

      responses:
        '200':
          description: Liste des serveurs récupérée avec succès
        '404':
          description: Aucun serveur trouvé

    post:
      summary: Ajouter un nouveau serveur
      description: |
        Permet d'ajouter un serveur à une cible existante. Un serveur doit avoir une adresse IP, un type, et un hébergeur.

        **Corps de la requête** :
          - `ip` (obligatoire) : Adresse IP du serveur.
          - `entreprise` (obligatoire) : Nom de l'entreprise hébergeant le serveur.
          - `type` (obligatoire) : Type du serveur (ex. Web, FTP, etc.).
          - `technology` (optionnel) : Technologie utilisée par le serveur.
          - `valid` (optionnel) : Statut de validation du serveur.

        **Erreurs possibles** :
          - `400 Bad Request` : Si les données fournies ne sont pas valides.

      requestBody:
        description: Données du serveur à ajouter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server'
      responses:
        '201':
          description: Serveur ajouté avec succès
        '400':
          description: Données invalides

  /attaques:
    post:
      summary: Créer une nouvelle attaque
      description: |
        Permet de créer une nouvelle attaque en associant une cible, un serveur, et un exploit. Le statut de l'attaque est également spécifié. Par défaut, l'attaque est marquée comme `prévue`.

        **Corps de la requête** :
          - `cible` (obligatoire) : Cible de l'attaque.
          - `serveur` (optionnel) : Serveur affecté à l'attaque.
          - `exploit` (optionnel) : Exploit utilisé pour l'attaque.
          - `statut` (optionnel) : Statut de l'attaque (prévu, en cours, réussi, raté).
          - `notes` (optionnel) : Notes liées à l'attaque.

        **Erreurs possibles** :
          - `400 Bad Request` : Données invalides.
          - `409 Conflict` : Attaque déjà existante avec ces mêmes paramètres.

      requestBody:
        description: Données de l'attaque à créer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/attack'
      responses:
        '201':
          description: Attaque créée avec succès
        '400':
          description: Données invalides
        '409':
          description: Attaque déjà existante

components:
  schemas:
    exploit:
      description: |
        Un exploit est une méthode permettant de tirer profit d'une vulnérabilité connue sur 
        un serveur. Il comprend un identifiant unique, un nom, une description, un auteur, 
        un type de serveur, un guide pas à pas pour réaliser l'attaque et un état de validation.
      type: object
      properties:
        exploit_id:
          type: integer
          description: Identifiant unique de l'exploit
        name:
          type: string
          description: Nom de l'exploit
        description:
          type: string
          description: Description détaillée de l'exploit, expliquant la vulnérabilité
        author:
          type: string
          description: Auteur de l'exploit, personne ayant découvert la vulnérabilité
        server_type:
          type: string
          description: Type de serveur vulnérable à l'exploit
        guide:
          type: string
          description: Guide pas à pas pour exploiter la vulnérabilité, expliquant les étapes afin
            de réaliser l'attaque
        validated:
          type: boolean
          description: Exploit validé ou non par l'administrateur
      required:
        - name
        - description
        - author
        - server_type
        - guide
      example:
        exploit_id: 1
        name: "Buffer Overflow Attack"
        description: "Exploit visant une vulnérabilité de débordement de mémoire tampon sur les serveurs."
        author: "Nicolas Jackson"
        server_type: "Linux"
        guide: "1) Identifier la taille du tampon. 2) Injecter un code malveillant. 3) Exécuter le payload."
        validated: false

    target:
      type: object
      properties:
        companyName:
          type: string
        domain:
          type: string
        localisation:
          type: string
        nbEmploys:
          type: integer
        revenue:
          type: integer
      required:
        - companyName
        - domain
      example:
        companyName: "Cible1"
        domain: "Finance"
        localisation: "Paris"
        nbEmploys: 1000
        nbServers: 50
        revenue: 50000000

    server:
      type: object
      properties:
        ip:
          type: string
          description: L'adresse IP du serveur
        company:
          type: string
          description: L'entreprise hébergeant le serveur
        type:
          type: string
          description: Le type de serveur (web, base de données, etc.)
        technology:
          type: string
          description: La technologie utilisée
        validated:
          type: boolean
          description: Le serveur est-il validé ?
      required:
        - adresse_ip
        - entreprise_hebergeante
        - type_serveur
      example:
        ip: "192.168.1.1"
        entreprise: "HostingCo"
        type: "Web"
        technology: "Apache"
        valid: true

    attack:
      type: object
      properties:
        target:
          type: integer
          description: L'identifiant unique de la cible de l'attaque
        server:
          type: string
          description: L'adresse IP du serveur utilisé pour l'attaque
        exploit:
          type: integer
          description: L'identifiant unique de l'exploit utilisé pour l'attaque
        status:
          type: string
          description: Le statut de l'attaque (prévue, en cours, réussie, ratée)
          enum:
            - planned
            - in progress
            - successful
            - failed
        notes:
          type: string
          description: Notes sur l'attaque
      required:
        - target
      example:
        cible: 1
        serveur: "198.202.505"
        exploit: 1
        statut: "in progress"
        notes: "Première attaque"

    credentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
      example:
        username: "Hacker007"
        password: "password123"

    user:
      type: object
      properties:
        username:
          type: string
          description: Nom d'utilisateur unique
        firstname:
          type: string
          description: Prénom de l'utilisateur
        lastname:
          type: string
          description: Nom de famille de l'utilisateur
        isAdmin:
          type: boolean
          description: Indique si l'utilisateur est un administrateur (true) ou un utilisateur standard (false)
      example:
        username: "Hacker007"
        firstname: "John"
        lastname: "Doe"
        isAdmin: false

    userWithCredentials:
      type: object
      properties:
        username:
          type: string
          description: Nom d'utilisateur unique
        firstname:
          type: string
          description: Prénom de l'utilisateur
        lastname:
          type: string
          description: Nom de famille de l'utilisateur
        isAdmin:
          type: boolean
          description: Indique si l'utilisateur est un administrateur
        password:
          type: string
          description: Mot de passe de l'utilisateur
      example:
        username: "Hacker007"
        firstname: "John"
        lastname: "Doe"
        isAdmin: false
        password: "password123"